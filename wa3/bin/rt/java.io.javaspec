package java.io;

public class IOException {}

public interface InputStream {
    
    //@ predicate InputStream();
    
    public int read();
        //@ requires InputStream();
        //@ ensures InputStream();
    
    public void close();
        //@ requires InputStream();
        //@ ensures emp;
    
}

public interface Reader {
    
    //@ predicate Reader();
    
}

public class InputStreamReader implements Reader {
    
    //@ predicate InputStreamReader(InputStream s);
    
    public InputStreamReader(InputStream s);
        //@ requires s.InputStream();
        //@ ensures Reader() &*& [_]InputStreamReader(s);
    
    /*@
    
    lemma void destroy();
        requires Reader() &*& [_]InputStreamReader(?s);
        ensures s.InputStream();
    
    @*/
    
}

public class BufferedReader implements Reader {
    
    //@ predicate BufferedReader(Reader r);
    
    public BufferedReader(Reader r);
        //@ requires r.Reader();
        //@ ensures Reader() &*& [_]BufferedReader(r);
    
    public String readLine();
        //@ requires Reader();
        //@ ensures Reader() &*& result != null;
    
    /*@
    
    lemma void destroy();
        requires Reader() &*& [_]BufferedReader(?r);
        ensures r.Reader();
    
    @*/
    
}

public interface OutputStream {
    
    //@ predicate OutputStream();
    
}

public interface Writer {
    
    //@ predicate Writer();
    
    public void write(String text);
        //@ requires this.Writer();
        //@ ensures this.Writer();
    
    public void flush();
        //@ requires this.Writer();
        //@ ensures this.Writer();
}

public class OutputStreamWriter implements Writer {
    
    //@ predicate OutputStreamWriter(OutputStream s);
    
    public OutputStreamWriter(OutputStream s);
        //@ requires s.OutputStream();
        //@ ensures this.Writer() ;
    
    /* @
    
    lemma void destroy();
        requires Writer() &*& [_]OutputStreamWriter(?s);
        ensures s.OutputStream();
    
    @ */
    
}

public class BufferedWriter implements Writer {
    
    //@ predicate BufferedWriter(BufferedWriter w);
    
    public BufferedWriter(Writer w);
        //@ requires w.Writer();
        //@ ensures BufferedWriter(this);
    
    /* @
    
    lemma void destroy();
        requires Writer() &*& [_]BufferedWriter(?w);
        ensures w.Writer();
    
    @ */
    
}

public class PrintWriter implements Writer {
    
    //@ predicate PrintWriter();
    
    public PrintWriter(Writer w, boolean autoFlush);
        //@ requires w.Writer();
        //@ ensures this.PrintWriter();
    
    public void println(String text);
        //@ requires [?f]this.PrintWriter();
        //@ ensures [f]this.PrintWriter();
    
    /* @
    
    lemma void destroy();
        requires Writer() &*& [_]PrintWriter(?w);
        ensures w.Writer();
    
    @ */
  
}



public class PrintStream  {
    
    //@ predicate PrintStream();
  
    
    public void println(String text);
        //@ requires [?f]this.PrintStream();
        //@ ensures [f]this.PrintStream();
   
   
}

public class DataOutputStream  {
    
    //@ predicate DataOutputStream();
    
    public DataOutputStream(OutputStream out);
        //@ requires out.OutputStream();
        //@ ensures this.DataOutputStream();
  
    public void writeChars(String s);
        //@ requires this.DataOutputStream();
        //@ ensures this.DataOutputStream();
        
     public void writeBytes(String s);
        //@ requires [?f]this.DataOutputStream();
        //@ ensures [f]this.DataOutputStream();
        
     public void write(byte[] b, int off, int len);
        //@ requires [?f]this.DataOutputStream();
        //@ ensures [f]this.DataOutputStream();
        
     public void close();
        //@ requires this.DataOutputStream();
        //@ ensures emp;
   
   
}

public class File  {

    public static final char separatorChar = '/';
    
    //@ predicate File();
    
    public File(String pathname);
        //@ requires pathname!=null;
        //@ ensures this.File();
  
       public int length();
        //@ requires this.File();
        //@ ensures result >= 0;
   
}

public class FileInputStream  {
    
    //@ predicate FileInputStream();
    
    public FileInputStream(File file);
        //@ requires file.File();
        //@ ensures this.FileInputStream();
        
    public FileInputStream(String pathname);
        //@ requires pathname!=null;
        //@ ensures this.FileInputStream();
  
    public int read(byte b[]);
        //@ requires this.FileInputStream();
        //@ ensures result >= -1;
   
}
